#version 400 core

in vec2 textureCoords_out;
in vec3 surfaceNormal;
in vec3 lightVector[10];
in vec3 cameraVector;
in float visibility;

out vec4 outColor;

uniform sampler2D textureSampler;
uniform vec3 lightColor[10];
uniform vec3 attenuation[10];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;

void main(void){
    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitCameraVector = normalize(cameraVector);

    vec3 totalDiffusion = vec3(0.0);
    vec3 totalSpecular = vec3(0.0);

    for(int i = 0; i < 10; i++){
        float distance = length(lightVector[i]);
        float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
        vec3 unitLightVector = normalize(lightVector[i]);
        float nDot1 = dot(unitNormal, unitLightVector);
        float brightness = max(nDot1, 0.0);
        vec3 lightDirection = -unitLightVector;
        vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);

        float specularFactor = dot(reflectedLightDirection, unitCameraVector);
        specularFactor = max(specularFactor, 0.0);
        float damperFactor = pow(specularFactor, shineDamper);
        totalDiffusion = totalDiffusion + (brightness * lightColor[i]) / attFactor;
        totalSpecular = totalSpecular + (damperFactor * reflectivity * lightColor[i]) / attFactor;
    }
    totalDiffusion = max(totalDiffusion, 0.2);

    vec4 textureColor = texture(textureSampler, textureCoords_out);
    if(textureColor.a < 0.5){
        discard;
    }

    outColor = vec4(totalDiffusion, 1.0) * textureColor + vec4(totalSpecular, 1.0);
    outColor = mix(vec4(skyColor, 1.0), outColor, visibility);
}